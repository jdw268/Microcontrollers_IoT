/**
   This program reads the temperature value of a TMP36 sensor connected to a ESP8266 development board.
   It displays the result to the user's serial monitor and if the temperature goes above 75 degrees F,
   the ESP8266 board will send the temperature data to the ThingWorx platform.

   It uses libraries from ESP8266 board as well as ThingWorx REST API.

   Reference:  ThingWorx Developer exercise Adafruit Feather QuickStart

   Written by:  Jillian Irvin
   V1

*/

#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <Arduino.h>
#include <stdio.h>

//HTTPClient libraries provide methods to send HTTP requests

// ThingWorx server definitions -modify for a specific platform instance
const char TWPlatformBaseURL[] = "xxx";
const char appKey[] = "xxx";  //bad for production - this is an admin key; hide in video
const char TWServerFingerPrint[] = "B1:0A:1C:41:FB:47:9B:D2:FC:5D:F6:FE:06:1C:D9:27:0F:96:88:B4";  //used for https

/*
   This will set as the Accept header for all the HTTP requests to the ThingWorx server
  //valid values are: application/json, text/xml, text/csv, text/html (default)
  using csv to read on serial monitor
*/
#define ACCEPT_TYPE "text/csv"

//define string of thing on TW connecting to
String thingName;

float temperatureC = 0.0f;
float temperatureF = 0.0f;

//TMP36 Pin Variables
int sensorPin = A0; //the analog pin the TMP36's Vout (sense) pin is connected to
//the resolution is 10 mV / degree centigrade with a
//500 mV offset to allow for negative temperatures

//run once at device power on
void setup() {

  //analog pin on ESP8266 board is input only so doesn't need pinMode defined

  //Start the serial connection with the computer to view the result open the serial monitor
  Serial.begin(9600);
  Serial.printf("Starting...\n");

  //connect board to wifi call with 10 second timeout
  connectToWiFi(10);

  //set thingName variable
  thingName = getUniqueDeviceName() + "_jirvin";

  //initialize new thing on TW platform (if doesn't already exist)
  initializeThing();

}  //end setup


//ran while device powered
void loop() {

  delay(10000);

  //read the temperature in the house and post to TW
  //getting the voltage reading from the temperature sensor
  float readingADC = analogRead(sensorPin);
  delay(1000);
  Serial.print("ADC reading is b/t 0 & 1023: ");
  Serial.println(readingADC);

  /*
    To convert the voltage to temperature, simply use the basic formula:
    Temp in °C = [(Vout in mV) - 500] / 10
    So for example, if the voltage out is 1V that means that the temperature is ((1000 mV - 500) / 10) = 50 °C
    If you're using a LM35 or similar, use line 'a' in the image above and the formula: Temp in °C = (Vout in mV) / 10
  */

  //convert reading - for 3.3V supply and adc - voltage at pin in mV
  float reading = readingADC*(3300.0/1024);
  
  temperatureC = ((reading - 500) / 10);
  Serial.print(temperatureC); 
  Serial.println(" degrees C");

  //now convert to Fahrenheit
  temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;
  Serial.print(temperatureF); 
  Serial.println(" degrees F");

  //convert tempF into string
  String tempF = String(temperatureF);

  //put the F temperature to TW thing houseTemp property
  int putResponseCode = putToThing(thingName, "houseTemp", "{\"houseTemp\":\" " + tempF + " \"} ");

}  //end loop


/*
  Description:  Intializes thing on platform and a property definition
  Inputs:  none
  Return:  none
*/
void initializeThing() {
  int getResponseCode;
  int postResponseCode;

  //check that WiFi is connected
  if (WiFi.status() == WL_CONNECTED) {

    //first call httpGetProperty method using the thingName variable and "name" property
    //thingName should have at least a name if on platform
    getResponseCode = httpGetProperty(thingName, "name");

    //a 404 response indicates successful connection to TW platform but no Thing yet
    //need to create the thing and add the houseTemp property
    if (getResponseCode == 404) {

      //first try to create a new Thing on the platform
      postResponseCode = createThing(thingName);

      //the newly crated Thing has to be enabled
      postResponseCode = postToThing(thingName, "EnableThing", ""); // no POST body needed for EnableThing endpoint

      //after the new Thing is enabled it must be restarted
      postResponseCode = postToThing(thingName, "RestartThing", ""); // no POST body needed for RestartThing endpoint

      //add houseTemp property to the Thing - 3rd parameter looks ugly because required quotes in JSON are escaped with backslashes
      postResponseCode = postToThing(thingName, "AddPropertyDefinition", "{\"name\":\"houseTemp\",\"type\":\"NUMBER\"}");
      //POST body contains JSON object with property name and property type
      //after changes to a Thing's structure it must be restarted
      postResponseCode = postToThing(thingName, "RestartThing", ""); // no POST body needed for RestartThing endpoint
    }

    //a 200 response code means successful - so thing does exist on platform; now check if the houseTemp property exists
    else if (getResponseCode == 200) {
      //check if houseTemp property exists
      getResponseCode = httpGetProperty(thingName, "houseTemp");

      //a 404 response indicates successful connection to TW platform but houseTemp property so create it
      //need to create the thing and add the houseTemp property
      if (getResponseCode == 404) {
        //add houseTemp property to the Thing - 3rd parameter looks ugly because required quotes in JSON are escaped with backslashes
        postResponseCode = postToThing(thingName, "AddPropertyDefinition", "{\"name\":\"houseTemp\",\"type\":\"NUMBER\"}");
        //POST body contains JSON object with property name and property type
      }
    }  //end elseif

    else {
      Serial.printf("Unknown http error \n");
    }
    delay(2000);

  }// end WiFi connected

  else {
    Serial.printf("****Wifi connection dropped****\n");
    delay(500);
    WiFi.disconnect(true);
    connectToWiFi(10);
    delay(500);

    //try to reinitialize thing - will this call lead to stack overflow?
    initializeThing();
  }

} //end initializeThing


/*
  Description:  Attempt to make a WiFi connection. Checks if connection has been made 
  once per second until timeout is reached returns TRUE if successful or FALSE if timed out
  Inputs:  timeout length
  Return:  boolean
*/
boolean connectToWiFi(int timeout) {
  delay(10);
  //set mode of wifi to STA (station mode) b/c default has an access point setup
  WiFi.mode(WIFI_STA);
  WiFi.begin("Why_Phi", "bcalphathrutauweretaken");

  //don't need secure connection to lan

  //set the access point (not using global variables for ssid and password)
  // WiFiMulti.addAP("Why_Phi", "bcalphathrutauweretaken");

  Serial.println("Connecting...");


  // loop while WiFi is not connected waiting one second between checks
  uint8_t tries = 0; // counter for how many times we have checked

  // stop checking if connection has been made OR we have timed out
  while ((WiFi.status() != WL_CONNECTED) && (tries < timeout)) {
    tries++;
    Serial.print(".");  // print . for progress bar
    Serial.println(WiFi.status());
    delay(500);
  }

  //let user know if board connected
  if (WiFi.status() == WL_CONNECTED) { //check that WiFi is connected, print status and device IP address before returning
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    return true;
  } else { //if WiFi is not connected we must have exceeded WiFi connection timeout
    return false;
  }

}

/*
   Description: Create a name for the board that is probably unique by appending last two bytes of MAC address
   return name as a String
   Inputs: none
   Return: string
*/
String getUniqueDeviceName() {

  String uniqueName;
  uint8_t mac[WL_MAC_ADDR_LENGTH];
  WiFi.macAddress(mac); // WiFi does NOT need to be connected for this call
  String macID = String(mac[WL_MAC_ADDR_LENGTH - 2], HEX) +
                 String(mac[WL_MAC_ADDR_LENGTH - 1], HEX);
  macID.toUpperCase();
  uniqueName = "ESP8266Board-" + macID;
  Serial.println("DeviceID>" + uniqueName);
  return uniqueName;
}  //end getUniqueDeviceName


/*
    Description: Make HTTP GET to a specific Thing and Propertry on a ThingWorx server thingName
    returns HTTP response code from server and prints full response
    Input: string of thing, string of property to request
    Return:  int of request result
*/
int httpGetProperty(String thingName, String property) {
  HTTPClient http;
  int httpCode = -1;
  String response = "";
  Serial.print("[httpGetPropertry] begin...");

  //string for http get request - checking if property exists
  String fullRequestURL = String(TWPlatformBaseURL) + "/Thingworx/Things/" + thingName + "/Properties/" + property;

  //since TW server https, must use fingerprint to begin connection
  http.begin(fullRequestURL, TWServerFingerPrint);

  //adding headers
  http.addHeader("Accept", ACCEPT_TYPE, false, false);
  http.addHeader("appKey", appKey, false, false);
  Serial.println("GET URL>" + fullRequestURL + "<");

  // start connection and send HTTP header
  httpCode = http.GET();

  if (httpCode > 0) {
    response = http.getString();
    Serial.printf("[httpGetPropertry] response code:%d body>", httpCode);
    Serial.println(response + "<\n");
  } else {
    Serial.printf("[httpGetPropertry] failed, error: %s\n\n", http.errorToString(httpCode).c_str());
  }

  http.end();
  return httpCode;
}  //end httpGetProperty


/*
  Description:  Makes HTTP POST to platform to CreateThing service using input string as the new Things's name.
  Input:  string of thing requesting from
  Return: int server response code
*/
int createThing(String nameOfThing) {
  HTTPClient http;
  int httpCode = -1;
  String response = "";
  Serial.print("[createThing] begin...");

  //string for http post request - calling server CreateThing
  String fullRequestURL = String(TWPlatformBaseURL) + "/Thingworx/Resources/EntityServices/Services/CreateThing";

  //since TW server https, must use fingerprint to begin connection
  http.begin(fullRequestURL, TWServerFingerPrint);

  //add http headers to rest request
  http.addHeader("Accept", ACCEPT_TYPE, false, false);
  http.addHeader("Content-Type", "application/json", false, false);

  //use global app key variable
  http.addHeader("appKey", appKey, false, false);

  Serial.println("POST URL>" + fullRequestURL + "<");

  //send HTTP header to post
  httpCode = http.POST("{\"name\": \"" + nameOfThing + "\",\"thingTemplateName\": \"GenericThing\"}");

  // httpCode will be negative on error
  if (httpCode > 0) {

    //print results
    response = http.getString();
    Serial.printf("[createThing] response code:%d body>", httpCode);
    Serial.println(response + "<\n");

  } else {
    Serial.printf("[createThing] POST... failed, error: %s\n\n", http.errorToString(httpCode).c_str());
  }

  //end http client
  http.end();
  return httpCode;
}  //end createThing


/*
  Description:  make HTTP POST to ThingWorx server Thing service
  Inputs:  nameOfThing - Name of Thing to POST to; endPoint - Services URL to invoke
          postBody - Body of POST to send to ThingWorx platform
  Return: HTTP response code from server
*/
int postToThing(String nameOfThing, String endPoint, String postBody) {
  HTTPClient http;
  int httpCode = -1;
  String response = "";
  Serial.print("[postToThing] begin...");

  //add http headers to rest request
  String fullRequestURL = String(TWPlatformBaseURL) + "/Thingworx/Things/" + nameOfThing + "/Services/" + endPoint;
  Serial.println("URL>" + fullRequestURL + "<");

  //since TW server https, must use fingerprint to begin connection
  http.begin(fullRequestURL, TWServerFingerPrint);

  http.addHeader("Accept", ACCEPT_TYPE, false, false);
  http.addHeader("Content-Type", "application/json", false, false);
  http.addHeader("appKey", appKey, false, false);

  Serial.println("[postToThing] POST body>" + postBody + "<");
  // start connection and send HTTP header
  httpCode = http.POST(postBody);

  // httpCode will be negative on error
  if (httpCode > 0) {

    response = http.getString();
    Serial.printf("[postToThing] response code:%d body>", httpCode);
    Serial.println(response + "<\n");

  } else {
    Serial.printf("[postToThing] POST... failed, error: %s\n\n", http.errorToString(httpCode).c_str());
  }
  http.end();
  return httpCode;
} //end postToThing


/*
  Description:  make HTTP PUT to ThingWorx server Thing service
  Inputs:  nameOfThing - Name of Thing to PUT to; endPoint - Property URL to update
        putBody - Body of PUT to send to ThingWorx platform
  Return: HTTP response code from server
*/
int putToThing(String nameOfThing, String endPoint, String putBody) {
  HTTPClient http;
  int httpCode = -1;
  String response = "";
  Serial.print("[putToThing] begin...");
  String fullRequestURL = String(TWPlatformBaseURL) + "/Thingworx/Things/" + nameOfThing + "/Properties/" + endPoint;
  Serial.println("URL>" + fullRequestURL + "<");

  //since TW server https, must use fingerprint to begin connection
  http.begin(fullRequestURL, TWServerFingerPrint);

  http.addHeader("Accept", ACCEPT_TYPE, false, false);
  http.addHeader("Content-Type", "application/json", false, false);
  http.addHeader("appKey", appKey, false, false);

  Serial.println("[putToThing] PUT body>" + putBody + "<");

  // send HTTP header
  httpCode = http.PUT(putBody);
  // httpCode will be negative on error
  if (httpCode > 0) {

    response = http.getString();
    Serial.printf("[putToThing] response code:%d body>", httpCode);
    Serial.println(response + "<\n");

  } else {
    Serial.printf("[putToThing] PUT... failed, error: %s\n\n", http.errorToString(httpCode).c_str());
  }
  http.end();
  return httpCode;
}  //end putToThing

